/*generated by sohu resource loader*/
(function() {
if (window.LOADCSS) {
	return;
}

// type checking functions
function isFunction(obj) {
	return Object.prototype.toString.call(obj) === "[object Function]";
}

function isArray(obj) {
	return Object.prototype.toString.call(obj) === "[object Array]";
}

function isString(obj) {
	return typeof obj == "string" || Object.prototype.toString.call(obj) === "[object String]";
}

window.LOADCSS = function(urls, charset) {
	var head = document.getElementsByTagName("head")[0];

	// inner function for loading a single css file
	function loadcss(url, charset) {
		var link = document.createElement("link");
		link.setAttribute("rel", "stylesheet");
		link.setAttribute("type", "text/css");
		if (charset) {
			link.charset = charset;
		}
		link.setAttribute("href", url);
		head.appendChild(link);
	};

	if (isString(urls)) {
		loadcss(urls, charset);
	}
	else if (isArray(urls)) {
		for (var i = 0; i < urls.length; i++) {
			if (isString(urls[i])) {
				loadcss(urls[i], charset);
			}
			else if (isArray(urls[i])) {
				loadcss(urls[i][0], urls[i][1]);
			}
		}
	}
};

window.LOADJS = function(urls, callback, charset) {
	var i = 0;
	if (isString(callback)) {
		charset = callback;
		callback = null;
	}

	// callback for js queue loading
	function success() {
		if (i < urls.length) {
			if (isString(urls[i])) {
				loadjs(urls[i], success, charset);
			}
			else if (isArray(urls[i])) {
				loadjs(urls[i][0], success, urls[i][1]);
			}

			i++;
		}
		else if (isFunction(callback)) {
			callback();
		}
	};

	// inner function for loading a single js file
	function loadjs(url, callback, charset) {
		var head = document.getElementsByTagName("head")[0];
		var script = document.createElement("script");
		script.async = true;
		if (charset) {
			script.charset = charset;
		}
		script.src = url;

		// Handle Script loading
		var done = false;
		// Attach handlers for all browsers
		script.onload = script.onreadystatechange = function(){
			if ( !done && (!this.readyState ||
					this.readyState == "loaded" || this.readyState == "complete") ) {
				done = true;
				if (isFunction(callback)) {
					callback();
				}
				// Handle memory leak in IE
				script.onload = script.onreadystatechange = null;
				head.removeChild( script );
			}
		};

		head.appendChild(script);
	};

	// use different way to load a single file or a bundle of files
	if (isString(urls) && urls) {
		loadjs(urls, callback, charset);
	}
	else if (isArray(urls) && urls.length) {
		if (isString(urls[i])) {
			loadjs(urls[i], success, charset);
		}
		else if (isArray(urls[i])) {
			loadjs(urls[i][0], success, urls[i][1]);
		}

		i++;
	}
	else if (isFunction(callback)) {
		callback();
	}
}
})();

(function() {
	if (window.iToolbarEnhance) {
		return;
	}

	window.iToolbarEnhance = true;
	var urlCSS = [
		'http://r.suc.itc.cn/combo.action?v.201309171622&t=css&c=utf-8&p=&r=/mstoolbar/blog/itoolbar.css'
	];
	var urlJS = [
		'http://r.suc.itc.cn/combo.action?v.201307301840&t=js&c=utf-8&p=&r=/mstoolbar/lib/jquery-1.9.1.js|/mstoolbar/lib/base64.js|/mstoolbar/core/passport.js|/mstoolbar/core/mstoolbar.core.js|/mstoolbar/core/hogan.js',
    'http://r.suc.itc.cn/combo.action?v.201401151415&t=js&c=utf-8&p=&r=/mstoolbar/core/mslogin.js|/mstoolbar/template.js|/mstoolbar/blog/partial.js|/mstoolbar/mstoolbar.js'
	];

	LOADCSS(urlCSS, "utf-8");
	LOADJS(urlJS, "utf-8");
})();
