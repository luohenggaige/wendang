11月12日复习总结

一：异常
	1.java除了有处理的方式，还会将问题封装成对象。
	
	2.有很多的对象对各种各样的问题进行描述与封装，于是为了便于操作提高复用性需要用到抽取思想
		将这些对象的共性向上抽取出来后，形成了一个体系 Throwable 。
	
	3. Throwable (字面可抛出的意思)
		|--Exception	严重性的，一般不做处理(指的是针对性处理 try catch ，而不是泛义的处理)，直接修改代码。
		|--Error		可定义针对性的处理

	4.处理方式
		1> java 虚拟机的处理方式默认为抛
			当代码有错误时，如果没有人为定义处理方式，就会是java虚拟机处理，而虚拟机做不了针对性处理，只能做默认处理
			代码抛给JVM,JVM抛给调用者(输出显示)。
		2>人为抛出
			自己写的代码，自己会有一个预判性，知道可能出现的问题，这时会人为的在错误所在的函数上声明一个异(用throws)），
			当问题出现时就停止运行并抛出提示。
		
		3>针对性处理
			try{需要被检测的代码}			字面尝试的意思，对异常代码进行捕捉动作
			catch(Exception e){处理方式}	针对性是 catch 所具有的
			finally{}						永远都会执行的代码

	5.关键字
		throw 用在函数内，用于抛出异常对象，一旦执行就结束功能停止运行。
		throws 用在函数上，用于抛出异常类，可以抛出多个异常类，用逗号隔开。

二.多线程
	1.java 是多线程的编程语言，如垃圾自动回收。
	2.有一个描述线程的类，可以继承这个类 Thread 创建多线程。
		步骤：1>继承
			  2>重写 run (){}方法。(自定义内容)
			  3>创建
			  4>调用	start()方法

	3.第二种方式，接口创建 Runnable
		1>定义一个类实现接口，里面创建封装需要的线程任务。
		2>创建类的对象
		3>创建线程
		4>将对象作为实参传递给线程

	例：
	class RenWu implements Runnable {
		private int piao = 100;
		public void run (){
			while (true){
				if (piao > 0 ){
					System.out.println(Thread.currentThread().getName()+"---"+piao--);
				}
			}
		}
	}
	class ThreadDemo{
		public static void main(String[]a){
			RenWu s = new RenWu();
			Thread t1 = new Thread (s);
			Thread t2 = new Thread (s);
			t1.start();
			t2.start();
		}
	}
	4>一般推荐用接口实现，因为接口可以扩展
	  可以在继承其它类情况下也可以实现多线程，第一种方式继承之后不能有任何功能。
	  还有一种理解：将所有的线程对象共性的东西提取出来定义为一个接口，共性的东西就是 run() 方法
	  就可以用覆盖与接口概念来理解了：继承的是基本功能，再实现扩展其它功能。